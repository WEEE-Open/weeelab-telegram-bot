#!/usr/bin/env python
# coding:utf-8

'''
WEEELAB_BOT - Telegram bot.
Author: God
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
NOTE: The print commands are only for debug.
'''
# system library needed to read the environment variables
import os
# library to make requests to telegram server
import requests
# library to make requests to owncloud server, more details on https://github.com/owncloud/pyocclient
import owncloud
# library to handle time
import datetime
from datetime import timedelta
# library to handle dictionary
import operator
#library for evaluation of json file
import json

# get environment variables
OC_URL = os.environ.get('OC_URL') # url of the owncloud server
OC_USER = os.environ.get('OC_USER')  # OwnCloud username
OC_PWD = os.environ.get('OC_PWD') # OwnCloud password
LOG_PATH = os.environ.get('LOG_PATH') # path of the log file to read in owncloud (/folder/file.txt)
TOKEN_BOT = os.environ.get('TOKEN_BOT') # Telegram token for the bot API
USER_BOT_PATH = os.environ.get('USER_BOT_PATH') # path of the file to store bot users in owncloud (/folder/file.txt)
USER_PATH = os.environ.get('USER_PATH') # path of the file with authorized users in owncloud (/folder/file.json)

# class with function used by the bot
class BotHandler:
    '''init function to set bot token and reference url'''
    def __init__(self, token):
        self.token = token # set token
        self.api_url = "https://api.telegram.org/bot{}/".format(token) # set bot url from the token

    '''function to get the last message send by the user to the bot
    for more info about this method refeer to https://core.telegram.org/bots/api#getting-updates'''
    def get_updates(self, offset=None, timeout=30):
        method = 'getUpdates' # set type of method used refering to Telegram API
        # set parameter like timeout in seconds for long polling and no offset related to updates
        params = {'timeout': timeout, 'offset': offset} 
        # make the request to the bot with the previous method and parameters, get type because we request a message
        resp = requests.get(self.api_url + method, params) 
        # store the json response from the telegram server
        result_json = resp.json()['result'] 
        return result_json  # return a variable of type json as response of the bot

    '''function to send messages to the user of the bot
    for more info about this method refeer to https://core.telegram.org/bots/api#sendmessage'''
    def send_message(self, chat_id, text, parse_mode='Markdown', mode = False ):
        # set parameter like the unique identifier of the chat between user and bot and the message to send
        if mode == False:
            params = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode}  
        else:
            params = {'chat_id': chat_id, 'text': text}  
        method = 'sendMessage'  # set the method used refering to Telegram API
        # make the request to the bot with the previous method and parameters, post type because we send a message
        resp = requests.post(self.api_url + method, params)
        return resp # return a variable of type json as response of the bot

    '''function to get last message if there is'''
    def get_last_update(self):
        get_result = self.get_updates() # recall the function to get updates
        if len(get_result) > 0: # check if there are new messages
            last_update = get_result[-1]  # takes the last update from the result of the function
            return last_update # return the last message in json format
        else:
            return -1 # in case of error return an error code used in the main function

'''function created by Ste (teschio) complete code at https://github.com/WEEE-Open/weeelab
extract the name and surname from a string of type name.surname to obtain Name Surname'''
def nameExtr(username):
    firstName = username.split('.')[0].capitalize() # Extract the name and capitalize it
    lastName = username.split('.')[1].capitalize() # Extract the surname and capitalize it
    return firstName + " " + lastName # Return a string of type "Name Surname"

# set variable used in main function
weee_bot = BotHandler(TOKEN_BOT) # create the bot object

'''main function of the bot'''
def main():
    oc = owncloud.Client(OC_URL) # create an object of type Client to connect to the cloud url
    oc.login(OC_USER, OC_PWD) # connect to the cloud using authorize username and password
    new_offset = None # set at beginning an offset None for the get_updates function

    while True:
        weee_bot.get_updates(new_offset) # call the function to check if there are new messages
        last_update = weee_bot.get_last_update() # takes the last message from the server
        '''Variables for /inlab command'''
        user_inlab_list = ''
        people_inlab = 0
        found_user_inlab = False
        '''Variables for /log command'''
        lines_to_print = 0 # default lines number to send
        lines_message = 0 # number of lines of the message
        log_data = ''
        log_print = ''
        '''Variables for /stat command'''
        user_hours = 0 # initialize hour variable, type int
        user_minutes = 0 # initialize minute variable, type int
        total_hours = 0 
        total_minutes = 0
        hours_sum = datetime.timedelta(hours=user_hours, minutes=user_minutes) # initialize hours sum variable, type datetime 
        ''' Variables for /top command'''
        users_name = []
        users_hours = {}
        top_list_print = 'Top User List!\n'
        position = 0
        number_top_list = 50  # Inizialize the number of users to print for command /top

        if last_update != -1: 
            try: 
                print last_update['message'] # DEBUG
                level = 0
                complete_name = ''
                log_file = oc.get_file_contents(LOG_PATH) # log file stored in owncloud server
                user_file = json.loads(oc.get_file_contents(USER_PATH)) # User data stored in owncloud server
                log_lines = log_file.splitlines()
                lines_inlab = [i for i, lines in enumerate(log_lines) if 'INLAB' in lines]
                # store the data of the last update of the log file, the data is in UTC so we add 2 for eu/it local time
                log_update_data = oc.file_info(LOG_PATH).get_last_modified() + timedelta(hours=2)     
                last_update_id = last_update['update_id'] # store the id of the bot taken from the mesasge
                new_offset = last_update_id + 1 # store the update id of the bot
                command  = last_update['message']['text'].split() # store all the words in the message in an array (split by space)
                last_chat_id = last_update['message']['chat']['id'] # store the id of the chat between user and bot read from the message in a variable
                last_user_id = last_update['message']['from']['id'] # store the id of the user read from the message in a variable
                last_user_name = last_update['message']['from']['first_name'] # store the name of the user read from the message in a variable
                last_user_username = last_update['message']['from']['username'] # store the username of the user read from the message in a variable
                for user in user_file["users"]:
                    if user["telegramID"] == str(last_user_id):
                        level = user["level"]
                        complete_name = user["name"].lower() + '.' + user["surname"].lower()

            except KeyError: # catch the exception if raised
                print "ERROR!" # DEBUG

            if level != 0: # check if the user is allowed to use the bot            
                ''' ADD COMMANDS HERE '''
                # Short introduction
                ''' Command "/start", Start info
                '''
                if command[0] == "/start" or command[0] == "/start@weeelabdev_bot": # Check if the message is the command /start
                    weee_bot.send_message(last_chat_id, '*WEEE-Open Telegram bot*.\n\
The goal of this bot is to obtain information about who is currently in the lab, \
who has done what, compute some stats and, in general, simplify the life of our members \
and to avoid waste of paper as well. \n\
All data is read from a weeelab log file, which is fetched from an OwnCloud shared folder. \n\
For a list of the available commands send /help.')
                # Show how many students are in lab right now
                ''' Command "/inlab", Show the number of people in lab.
                    Command "/inlab who", Show the name of the people in lab.
                '''
                if command[0] == "/inlab" or command[0] == "/inlab@weeelabdev_bot": # Check if the message is the command /inlab
                    people_inlab=log_file.count("INLAB")
                    for index in lines_inlab:
                        user_inlab = log_lines[index][47:log_lines[index].rfind(">")] # extract the name of the person
                        for user in user_file["users"]:
                            user_complete_name = user["name"].lower() + '.' + user["surname"].lower()
                            if (user_inlab == user_complete_name and (user["level"]==1 or user["level"]==2)):
                                user_inlab_list = user_inlab_list + '\n' + '- *' + nameExtr(user_inlab) + '*'
                            elif user_inlab == user_complete_name:
                                user_inlab_list = user_inlab_list + '\n' + '- ' + nameExtr(user_inlab)
                    if people_inlab == 0: # Check if there aren't people in lab
                        # Send a message to the user that makes the request /inlab
                        weee_bot.send_message(last_chat_id, 'Nobody is in lab right now.') 
                    elif people_inlab == 1:
                        weee_bot.send_message(last_chat_id, 'There is one student in lab right now:\n{}'.format(user_inlab_list)) 
                    else:
                        weee_bot.send_message(last_chat_id, 'There are {} students in lab right now:\n{}'.format(people_inlab, user_inlab_list)) 

                # Show log file
                ''' Command "/log", Show the complete LOG_PATH file (only for admin user, by default only 5 lines)
                    Command "/log [number]", Show the [number] most recent lines of LOG_PATH file
                    Command "/log all", Show all lines of LOG_PATH file.
                '''
                #Api limit message too long
                if command[0] == "/log" or command[0] == "/log@weeelabdev_bot": # Check if the message is the command /log
                    lines_to_print = len(log_lines)
                    if (len(command) > 1 and command[1].isdigit() and lines_to_print > int(command[1])): # check if the command is "/log [number]"
                        lines_to_print = int(command[1])
                    for lines_printed in range(0,lines_to_print):
                        if not ("INLAB" in log_lines[lines_printed]):
                            if log_data == log_lines[lines_printed][1:11]:
                                log_line_to_print = '_' + log_lines[lines_printed][47:log_lines[lines_printed].rfind(">")] + '_' + log_lines[lines_printed][log_lines[lines_printed].rfind(">")+1:len(log_lines[lines_printed])]
                                log_print = log_print + '{}\n'.format(log_line_to_print)
                                lines_message += 1
                            else:
                                if (len(command) == 1 and lines_message > 0):
                                    lines_printed = len(log_lines)
                                else:
                                    log_data = log_lines[lines_printed][1:11]
                                    log_line_to_print = '\n*' + log_data +'*\n_' + log_lines[lines_printed][47:log_lines[lines_printed].rfind(">")] + '_' + log_lines[lines_printed][log_lines[lines_printed].rfind(">")+1:len(log_lines[lines_printed])]
                                    log_print = log_print + '{}\n'.format(log_line_to_print)
                                    lines_message += 1
                            if lines_message > 25:
                                log_print = log_print.replace('[', '\[')
                                log_print = log_print.replace('::', ':')
                                weee_bot.send_message(last_chat_id, '{}\n'.format(log_print))
                                lines_message = 0
                                log_print = ''
                    log_print = log_print.replace('[', '\[')
                    log_print = log_print.replace('::', ':')
                    weee_bot.send_message(last_chat_id, '{}\nLatest log update: *{}*'.format(log_print, log_update_data))

                # Show the stat of the user
                ''' Command "/stat name.surname", Show hours spent in lab by name.surname user.
                '''
                if command[0] == "/stat" or command[0] == "/stat@weeelabdev_bot": # Check if the message is the command /stat
                    found_user = False # create a control variable used to check if name.surname is found
                    allowed = False
                    if len(command)==1:
                        user_name = complete_name
                        #print user_name
                        allowed = True
                    elif ((len(command) != 1) and (level==1)):  # Check if the command has option or not
                        user_name = str(command[1]) # store the option in a variable
                        allowed = True
                    else:
                        weee_bot.send_message(last_chat_id, 'Sorry! You are not allowed to view other users stats!\nOnly admins can!')
                    if allowed:
                        for lines in log_lines:
                            if not ("INLAB" in lines) and (user_name == lines[47:lines.rfind(">")]):
                                found_user = True
                                # extract the hours and minute from char 39 until ], splitted by :
                                (user_hours, user_minutes) = lines[39:lines.rfind("]")].split(':')
                                # convert hours and minutes in datetime type
                                partial_hours = datetime.timedelta(hours=int(user_hours), minutes=int(user_minutes)) 
                                hours_sum += partial_hours # sum to the previous hours 
                        if not found_user:
                            weee_bot.send_message(last_chat_id, 'No statistics for the given user. Have you typed it correctly? (name.surname)')      
                        else:
                            total_second = hours_sum.total_seconds()
                            total_hours = int(total_second // 3600)
                            total_minutes = int((total_second % 3600) // 60)
                            weee_bot.send_message(last_chat_id, 'Stat for the user {}\nHH:MM = {:02d}:{:02d}\nLatest log update:\n*{}*'.format(nameExtr(user_name), total_hours, total_minutes, log_update_data))
                            # write the stat of the user

                # Show the top list of the users
                ''' Command "/top", Show a list of the top users in lab (defaul top 50).
                '''
                if command[0] == "/top" or command[0] == "/top@weeelabdev_bot": # Check if the message is the command /top
                    if level == 1:
                        for lines in log_lines:
                            if not ("INLAB" in lines):
                                name = lines[47:lines.rfind(">")].encode('utf-8') 
                                (user_hours, user_minutes) = lines[39:lines.rfind("]")].split(':')
                                partial_hours = datetime.timedelta(hours=int(user_hours), minutes=int(user_minutes)) 
                                if (name in users_name): # check if user was already found
                                    users_hours[name] += partial_hours # add to the key with the same name the value partial_hours
                                else:
                                    users_name.append(name) # create a new key with the name
                                    users_hours[name] = partial_hours # add the hours to the key
                        # sort the dict by value in descendet order 
                        sorted_top_list = sorted(users_hours.items(), key=operator.itemgetter(1), reverse=True) 
                        for rival in sorted_top_list: # print the elements sorted
                            position += 1 # update the counter of position on top list
                            if position  <= number_top_list: # check if the list is completed
                                # extract the hours and minutes from dict, splitted by :
                                total_second = rival[1].total_seconds()
                                total_hours = int(total_second // 3600)
                                total_minutes = int((total_second % 3600) // 60)
                                # add the user to the top list
                                for user in user_file["users"]:
                                    user_complete_name = user["name"].lower() + '.' + user["surname"].lower()
                                    if rival[0]==user_complete_name:
                                        if (user["level"]==1 or user["level"]==2):
                                            top_list_print = top_list_print + '{}) \[{:02d}:{:02d}] *{}*\n'.format(position, total_hours, total_minutes, nameExtr(rival[0]))
                                        else:
                                            top_list_print = top_list_print + '{}) \[{:02d}:{:02d}] {}\n'.format(position, total_hours, total_minutes, nameExtr(rival[0]))
                        weee_bot.send_message(last_chat_id, '{}\nLatest log update: \n*{}*'.format(top_list_print, log_update_data)) # send the top list to the user that makes the request
                    else: 
                        weee_bot.send_message(last_chat_id, 'Sorry! You are not allowed to use this function!\nOnly admin can use it!')
                # Show help
                ''' Command "/help", Show an help.
                '''
                if command[0] == "/help" or command[0] == "/help@weeelabdev_bot": # Check if the message is the command /help
                    help_message = "Available commands and options:\n\n\
/inlab - Show the people in lab\n\
/log - Show last 5 login\n\
    + _number_ - Show last _number_ login\n\
    + _all_ - Show all login\n\
/stat - Show hours spent in lab by the user\n"
                    if (level == 1):
                        help_message += "\n*only for admin user*\n\
/stat _name.surname_ - Show hours spent in lab by this user\n\
/top - Show a list of top users in lab\n"
                    weee_bot.send_message(last_chat_id, '{}'.format(help_message))
            else:
                weee_bot.send_message(last_chat_id, 'Sorry! You are not allowed to use this bot.\nPlease contact us via [email](weeeopen@polito.it) or [Facebook page](https://www.facebook.com/weeeopenpolito/), or visit our [website](http://weeeopen.polito.it/) for more info. \nAfter being authorized /start the bot.')
            user_bot_contents = oc.get_file_contents(USER_BOT_PATH) # read the content of the user file stored in owncloud server
            if (str(last_user_id) in user_bot_contents): # Check if the user is already recorded
                pass
            else:
                # Store a new user name and id in a file on owncloud server, encoding in utf.8
                user_bot_contents = user_bot_contents.decode('utf-8') + '\'' + last_user_name.encode('utf-8') + '\'' + ': ' + '\'' + str(last_user_id) + '\'' + ', '   
                oc.put_file_contents(USER_BOT_PATH, user_bot_contents.encode('utf-8')) # write on the file the new data

# call the main() until a keyboard interrupt is called
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit()
